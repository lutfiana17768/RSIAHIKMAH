# table m_ruang
alter table m_ruang 
add column m_kelas_id integer,
add column m_pelayanan_id integer,
add column tarif_sarana real,
add column tarif_cetak_kartu real,
add column tarif_konsultasi real

# table m_kamar
alter table m_kamar	
add column jumlah_bed integer,
add column tarif real,
add column jenis_pelayanan character(1)

# m_paket_obat
alter table m_paket_obat add column paket_nama character(200)
ALTER TABLE m_paket_obat RENAME COLUMN m_barang_id TO m_obat_id;

#pasien 
alter table m_pasien add column wali_nama character varying(250)
alter table m_pasien add column wali_tgllahir date
alter table m_pasien add column wali_kelamin character varying(250)
alter table m_pasien add column wali_telepon character varying(250)
alter table m_pasien add column wali_alamat character varying(250)
alter table m_pasien add column wali_hubungan character varying(250)

start Rizki (2018 07 25) 
	alter table t_retur_jual alter column returjual_keterangan type character varying(150);
end rizki

start Rizki (2017 07 26)
	alter table m_perusahaan drop column perusahaan_fax, drop column perusahaan_email, drop column perusahaan_website,drop column perusahaan_koderek_utang,
	drop column perusahaan_koderek_piutang, drop column perusahaan_no_kontrak, drop column perusahaan_tgl_kontrak, drop column perusahaan_tgl_mulai, 
	drop column perusahaan_tgl_akhir, drop column perusahaan_siup;
end Rizki


start rizki (2018 10 04)
create or replace function storehpp()
	returns trigger language plpgsql as
$BODY$
begin
	insert into ms_baranghpp(baranghpp_barang_id, baranghpp_terima_id, baranghpp_diskon, baranghpp_harga, baranghpp_hpp) 
	values(NEW.barang_barang_id, NEW.terimadet_id, NEW.terimadet_diskon, NEW.terimadet_harga, 
	NEW.terimadet_harga - ((NEW.terimadet_diskon / 100) * NEW.terimadet_harga));

	return NEW;
end;
$BODY$;

create or replace function storehj()
	returns trigger language plpgsql as
$BODY$
begin
	insert into m_baranghj(baranghj_barang_id, baranghj_terima_id, baranghj_hj) 
	values(NEW.barang_barang_id, NEW.terimadet_id, 
	NEW.terimadet_harga + (((select barang_profit from m_barang where barang_id = NEW.barang_barang_id)/100) * NEW.terimadet_harga));

	return NEW;
end;
$BODY$;

insert barang to hj
	insert into m_baranghj(barang_barang_id, baranghj_hj)
	select barang_id AS barang_barang_id, barang_het AS baranghj_hj from m_barang;
insert barang to stok
	insert into t_stokobat(barang_barang_id, stokobat_kadaluarsa, stokobat_jumlah, stokobat_satuan_id)
	select barang_id AS barang_barang_id, '2019-12-31' AS stokobat_kadaluarsa, 10 AS stokobat_jumlah, barang_satuan_id AS stokobat_satuan_id from m_barang;

- Terima
Function :
CREATE OR REPLACE FUNCTION storestok()
  RETURNS trigger AS
$BODY$
begin
	update t_stokobat set stokobat_jumlah = stokobat_jumlah + NEW.terimadet_jumlah where 
	stokobat_barang_id =  NEW.barang_barang_id and stokobat_kadaluarsa = NEW.terimadet_kadaluarsa;

	insert into log_stok
	values (NEW.barang_barang_id, NEW.terimadet_jumlah, NEW.terimadet_kadaluarsa, 'Terima', NEW.terimadet_created_date);
	
	return NEW;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION storestok()
  OWNER TO postgres;

Trigger :
CREATE TRIGGER triggerstok
  AFTER INSERT
  ON t_terimadet
  FOR EACH ROW
  EXECUTE PROCEDURE storestok();

- Jual
Function :
CREATE OR REPLACE FUNCTION storestokv2()
  RETURNS trigger AS
$BODY$
begin
	update t_stokobat set stokobat_jumlah = stokobat_jumlah + (NEW.jualdet_jumlah * -1) where
	stokobat_barang_id = NEW.barang_barang_id AND stokobat_kadaluarsa = NEW.jualdet_kadaluarsa_date;

	insert into log_stok
	values (NEW.barang_barang_id, NEW.jualdet_jumlah * -1, NEW.jualdet_kadaluarsa, 'Jual', NEW.jualdet_created_date);

	return NEW;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION storestokv2()
  OWNER TO postgres;

Trigger :
CREATE TRIGGER triggerjual
  AFTER INSERT
  ON t_jualdet
  FOR EACH ROW
  EXECUTE PROCEDURE storestokv2();

- Retur Jual
Function :
CREATE OR REPLACE FUNCTION storestokv3()
  RETURNS trigger AS
$BODY$
begin
	update t_stokobat set stokobat_jumlah = stokobat_jumlah + NEW.returjualdetail_jumlah where 
	stokobat_barang_id =  NEW.barang_barang_id and stokobat_kadaluarsa = NEW.returjualdetail_kadaluarsa;

	insert into log_stok
	values (NEW.barang_barang_id, NEW.returjualdet_jumlah, NEW.returjualdet_kadaluarsa, 'Retur Jual', NEW.returjualdet_created_date);

	return NEW;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION storestokv3()
  OWNER TO postgres;

Trigger :
CREATE TRIGGER triggerreturjual
  AFTER INSERT
  ON t_retur_jualdetail
  FOR EACH ROW
  EXECUTE PROCEDURE storestokv3();


- Retur Beli
Function :
CREATE OR REPLACE FUNCTION storestokv4()
  RETURNS trigger AS
$BODY$
begin
	update t_stokobat set stokobat_jumlah = stokobat_jumlah + (NEW.returbelidetail_jumlah * -1) where
	stokobat_barang_id = NEW.barang_barang_id AND stokobat_kadaluarsa = NEW.returbelidetail_kadaluarsa;

	insert into log_stok
	values (NEW.barang_barang_id, NEW.returbelidetail_jumlah * -1, NEW.returbelidetail_kadaluarsa, 'Retur Beli', NEW.returbelidetail_created_date);
	
	return NEW;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION storestokv4()
  OWNER TO postgres;

Trigger :
CREATE TRIGGER triggerreturbeli
  AFTER INSERT
  ON t_retur_belidetail
  FOR EACH ROW
  EXECUTE PROCEDURE storestokv4();

end rizkik